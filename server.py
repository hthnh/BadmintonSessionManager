# server.py (Phi√™n b·∫£n cu·ªëi c√πng, r·∫•t g·ªçn g√†ng)
from flask import Flask, render_template, send_from_directory
from flask_sock import Sock
import os
import json

# Import c√°c Blueprint t·ª´ th∆∞ m·ª•c 'api'
from api.players import players_api
from api.courts import courts_api
from api.suggestions import suggestions_api
from api.matches import matches_api
from api.sessions import sessions_api
from api.settings import settings_api 
from api.scoreboards import scoreboards_api

# --- C·∫•u h√¨nh v√† Kh·ªüi t·∫°o ·ª®ng d·ª•ng ---
app = Flask(__name__,
            static_folder='static',
            template_folder='templates')
app.config['SECRET_KEY'] = 'deoaithongminhhontao'

sock = Sock(app)

clients = set()  # danh s√°ch client websocket k·∫øt n·ªëi

 

# --- ƒêƒÉng k√Ω c√°c Blueprint ---
# M·ªói Blueprint s·∫Ω qu·∫£n l√Ω m·ªôt nh√≥m API v·ªõi m·ªôt ti·ªÅn t·ªë (prefix) ri√™ng
app.register_blueprint(players_api, url_prefix='/api')
app.register_blueprint(courts_api, url_prefix='/api')
app.register_blueprint(suggestions_api, url_prefix='/api')
app.register_blueprint(matches_api, url_prefix='/api')
app.register_blueprint(settings_api, url_prefix='/api') 
app.register_blueprint(sessions_api, url_prefix='/api') 
app.register_blueprint(scoreboards_api, url_prefix='/api')



# --- Route ch√≠nh ph·ª•c v·ª• Frontend ---
# Route n√†y v·∫´n gi·ªØ ·ªü file ch√≠nh v√¨ n√≥ l√† giao di·ªán ng∆∞·ªùi d√πng, kh√¥ng ph·∫£i API


@app.route('/favicon.ico')
def favicon():
    return send_from_directory(os.path.join(app.root_path, 'static'),
                               'favicon.ico', mimetype='image/vnd.microsoft.icon')

@app.route('/')
def home():
    """Ph·ª•c v·ª• trang ch·ªß index.html."""
    return render_template('index.html')

@app.route('/settings')
def settings_page():
    """Ph·ª•c v·ª• trang qu·∫£n l√Ω settings.html."""
    return render_template('settings.html')

@app.route('/manage-players')
def players_page():
    """Ph·ª•c v·ª• trang qu·∫£n l√Ω players.html."""
    return render_template('players.html')

@app.route('/manage-courts')
def courts_page():
    """Ph·ª•c v·ª• trang qu·∫£n l√Ω admin.html."""
    return render_template('courts.html')

@app.route('/history')
def history_page():
    """Ph·ª•c v·ª• trang qu·∫£n l√Ω admin.html."""
    return render_template('history.html')
@app.route('/create')
def create_page():
    """Ph·ª•c v·ª• trang t·∫°o tr·∫≠n ƒë·∫•u th·ªß c√¥ng."""
    return render_template('create.html')


@sock.route('/ws')
def ws_endpoint(ws):
    clients.add(ws)
    print("‚ö° ESP connected via WebSocket")
    try:
        while True:
            data = ws.receive()
            if not data:
                break

            print(f"[Recv] {data}")
            msg = json.loads(data)

            # Broadcast cho c√°c client kh√°c (n·∫øu c√≥ dashboard)
            for client in list(clients):
                if client != ws:
                    try:
                        client.send(json.dumps(msg))
                    except:
                        clients.remove(client)

    except Exception as e:
        print(f"Client error: {e}")
    finally:
        clients.remove(ws)
        print("üîå ESP disconnected")





if __name__ == '__main__':
    app.run(host='0.0.0.0', port=5000, debug=True)
